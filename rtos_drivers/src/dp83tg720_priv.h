/*
 *  Copyright (c) Texas Instruments Incorporated 2020
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*!
 * \file  dp83tg720_priv.h
 *
 * \brief This file contains private type definitions and helper macros for the
 *        DP83TG720 Ethernet PHY.
 */

#ifndef DP83TG720_PRIV_H_
#define DP83TG720_PRIV_H_

/* ========================================================================== */
/*                             Include Files                                  */
/* ========================================================================== */

#include <stdint.h>
#include "phy_common_priv.h"

#ifdef __cplusplus
extern "C" {
#endif

/* ========================================================================== */
/*                                 Macros                                     */
/* ========================================================================== */

#define DP83TG720_DEVADDR         (0x1FU)
#define DP83TG720_DEVADDR_MMD1    (0x1U)

/*! \brief PHY Status Register (PHYSTS) */
#define DP83TG720_PHYSTS          (0x10U)
/*! \brief PHY Control Register (PHYCR) */
#define DP83TG720_PHYCR           (0x11U)
/*! \brief MII Interrupt [] Register 1 (MISR1) */
#define DP83TG720_MISR1           (0x12U)
/*! \brief MII Interrupt [] Register 2 (MISR2) */
#define DP83TG720_MISR2           (0x13U)
/*! \brief Receive Error Counter Register (RECR) */
#define DP83TG720_RECR            (0x15U)
/*! \brief BIST Control Register (BISCR) */
#define DP83TG720_BISCR           (0x16U)
/*! \brief MII Interrupt [] Register 3 (MISR3) */
#define DP83TG720_MISR3           (0x18U)
/*! \brief REG_19 (REG_19) */
#define DP83TG720_REG19           (0x19U)
/*! \brief CDCR (CDCR) */
#define DP83TG720_CDCR            (0x1EU)
/*! \brief PHYRCR (PHYRCR) */
#define DP83TG720_PHYRCR          (0x1FU)

#define MII_DP83TG720_INT_STAT1   (0x12U)
#define MII_DP83TG720_INT_STAT2   (0x13U)
#define MII_DP83TG720_INT_STAT3   (0x18U)
#define MII_DP83TG720_RESET_CTRL  (0x1FU)

#define DP83TG720_HW_RESET        PHY_BIT(15)
#define DP83TG720_SW_RESET        PHY_BIT(14)

#define DP83TG720_STRAP           		(0x45DU)
#define DP83TG720_RGMII_CTRL      		(0x600U)
#define DP83TG720_RGMII_ID_CTRL   		(0x602U)
#define DP83TG720_SGMII_CTRL      		(0x608U)
#define DP83TG720_MMD1_PMA_PMD_CONTROL	(0x834U)

/*! \brief INT_STAT1 bits */
#define DP83TG720_ANEG_COMPLETE_INT_EN    PHY_BIT(2)
#define DP83TG720_ESD_EVENT_INT_EN        PHY_BIT(3)
#define DP83TG720_LINK_STAT_INT_EN        PHY_BIT(5)
#define DP83TG720_ENERGY_DET_INT_EN       PHY_BIT(6)
#define DP83TG720_LINK_QUAL_INT_EN        PHY_BIT(7)

/*! \brief INT_STAT2 bits */
#define DP83TG720_SLEEP_MODE_INT_EN       PHY_BIT(2)
#define DP83TG720_OVERTEMP_INT_EN         PHY_BIT(3)
#define DP83TG720_OVERVOLTAGE_INT_EN      PHY_BIT(6)
#define DP83TG720_UNDERVOLTAGE_INT_EN     PHY_BIT(7)

/*! \brief INT_STAT3 bits */
#define DP83TG720_LPS_INT_EN      PHY_BIT(0)
#define DP83TG720_WAKE_REQ_EN     PHY_BIT(1)
#define DP83TG720_NO_FRAME_INT_EN PHY_BIT(2)
#define DP83TG720_POR_DONE_INT_EN PHY_BIT(3)

/*! \brief RGMII CTRL bits */
#define DP83TG720_RGMII_EN                PHY_BIT(3)

/*! \brief SGMII CTRL bits */
#define DP83TG720_SGMII_AUTO_NEG_EN       PHY_BIT(0)
#define DP83TG720_SGMII_EN                PHY_BIT(9)

/*! \brief Strap bits */
#define DP83TG720_MASTER_MODE_EN  	PHY_BIT(5)
#define DP83TG720_RGMII_IS_EN     	PHY_BIT(12)
#define DP83TG720_SGMII_IS_EN     	PHY_BIT(13)
#define DP83TG720_RX_SHIFT_EN     	PHY_BIT(14)
#define DP83TG720_TX_SHIFT_EN     	PHY_BIT(15)

/*! \brief RGMII ID CTRL */
#define DP83TG720_RX_CLK_SHIFT    PHY_BIT(1)
#define DP83TG720_TX_CLK_SHIFT    PHY_BIT(0)


/* ========================================================================== */
/*                         Structures and Enums                               */
/* ========================================================================== */

struct dp83tg720_init_reg {
		 uint8_t mmd;
         uint32_t reg;
         uint16_t val;
};

/*! \brief Chip specific init scripts */
static const struct dp83tg720_init_reg dp83tg720_cs1_master_init[] = {
		 {0x1F,0x0001,0x0940},
		 {0x1F,0x0001,0x0140},
		 {0x1F,0x0573,0x0101},
		 {0x01,0x0834,0xC001},
         {0x1F,0x08A1,0x0DFF},
         {0x1F,0x0802,0x0422},
		 {0x1F,0x0865,0x0002},
         {0x1F,0x08A8,0xE080},
         {0x1F,0x08A9,0x03F0},
         {0x1F,0x088D,0x2800},
         {0x1F,0x0899,0x2800},
		 {0x1F,0x050B,0x7E7C},
		 {0x1F,0x056A,0x5F41},
         {0x1F,0x056B,0xFFB4},
         {0x1F,0x056C,0xFFB4},
		 {0x1F,0x0412,0x0044},
		 {0x1F,0x0403,0x1E00},
		 {0x1F,0x041B,0x02F7},
		 {0x1F,0x0424,0x0040},
		 {0x1F,0x08A3,0x24E9},
		 {0x1F,0x0824,0x15E0},
		 {0x1F,0x0800,0x2090},
		 {0x1F,0x0894,0x5057},
		 {0x1F,0x085D,0x6405},
		 {0x1F,0x0892,0x01B0},
		 {0x1F,0x0840,0x4120},
		 {0x1F,0x0841,0x6151},
		 {0x1F,0x0843,0x327A},
		 {0x1F,0x0842,0x6652},
		 {0x1F,0x0852,0x327A},
		 {0x1F,0x0851,0x6652},
		 {0x1F,0x0844,0x3F10},
		 {0x1F,0x0879,0xE480},
		 {0x1F,0x089F,0x0001},
		 {0x1F,0x0853,0x0632},
		 {0x1F,0x080B,0x0016},
		 {0x1F,0x0864,0x1FD0},
         {0x1F,0x086A,0x0006},
		 {0x1F,0x0878,0x6032},
		 {0x1F,0x08AE,0x0128},
         {0x1F,0x08A0,0x09E7},
		 {0x1F,0x088A,0x001F},
		 {0x1F,0x018C,0x0001},
};

static const struct dp83tg720_init_reg dp83tg720_cs1_slave_init[] = {
         {0x1F,0x0001,0x0940},
		 {0x1F,0x0001,0x0140},
		 {0x1F,0x0573,0x0101},
		 {0x01,0x0834,0x8001},
         {0x1F,0x08A1,0x0DFF},
         {0x1F,0x0802,0x0422},
		 {0x1F,0x0865,0x0002},
         {0x1F,0x08A8,0xE080},
         {0x1F,0x08A9,0x03F0},
         {0x1F,0x088D,0x2800},
         {0x1F,0x0899,0x2800},
		 {0x1F,0x050B,0x7E7C},
		 {0x1F,0x056A,0x5F41},
         {0x1F,0x056B,0xFFB4},
         {0x1F,0x056C,0xFFB4},
		 {0x1F,0x0412,0x0044},
		 {0x1F,0x0403,0x1E00},
		 {0x1F,0x041B,0x02F7},
		 {0x1F,0x0424,0x0040},
		 {0x1F,0x08A3,0x24E9},
		 {0x1F,0x0824,0x15E0},
		 {0x1F,0x0800,0x2090},
		 {0x1F,0x0894,0x5057},
		 {0x1F,0x085D,0x6405},
		 {0x1F,0x0892,0x01B0},
		 {0x1F,0x0840,0x4120},
		 {0x1F,0x0841,0x6151},
		 {0x1F,0x0843,0x327A},
		 {0x1F,0x0842,0x6652},
		 {0x1F,0x0852,0x327A},
		 {0x1F,0x0851,0x6652},
		 {0x1F,0x0844,0x3F10},
		 {0x1F,0x0879,0xE480},
		 {0x1F,0x089F,0x0001},
		 {0x1F,0x0853,0x0632},
		 {0x1F,0x080B,0x0016},
		 {0x1F,0x0864,0x1F90},
         {0x1F,0x086A,0x0006},
		 {0x1F,0x0878,0x6032},
		 {0x1F,0x08AE,0x0128},
		 {0x1F,0x08A0,0x09E7},
		 {0x1F,0x088A,0x001F},
		 {0x1F,0x018C,0x0001},
};

static const struct dp83tg720_init_reg dp83tg720_cs1_1_master_init[] = {
		 {0x1F,0x0573,0x0101},
		 {0x01,0x0834,0xC001},
		 {0x1F,0x0405,0x5800},
		 {0x1F,0x08AD,0x3C51},
		 {0x1F,0x0894,0x5DF7},
		 {0x1F,0x08A0,0x09E7},
		 {0x1F,0x08C0,0x4000},
		 {0x1F,0x0814,0x4800},
		 {0x1F,0x080D,0x2EBF},
		 {0x1F,0x08C1,0x0B00},
		 {0x1F,0x087D,0x0001},
		 {0x1F,0x082E,0x0000},
		 {0x1F,0x0837,0x00F4},
		 {0x1F,0x08BE,0x0200},
		 {0x1F,0x08C5,0x4000},
		 {0x1F,0x08C7,0x2000},
		 {0x1F,0x08B3,0x005A},
		 {0x1F,0x08B4,0x005A},
		 {0x1F,0x08B0,0x0202},
		 {0x1F,0x08B5,0x00EA},
		 {0x1F,0x08BA,0x2828},
		 {0x1F,0x08BB,0x6828},
		 {0x1F,0x08BC,0x0028},
		 {0x1F,0x08BF,0x0000},
		 {0x1F,0x08B1,0x0014},
		 {0x1F,0x08B2,0x0008},
		 {0x1F,0x08EC,0x0000},
		 {0x1F,0x08C8,0x0003},
		 {0x1F,0x08BE,0x0201},
		 {0x1F,0x018C,0x0001},
};

static const struct dp83tg720_init_reg dp83tg720_cs1_1_slave_init[] = {
		 {0x1F,0x0573,0x0101},
		 {0x01,0x0834,0x8001},
		 {0x1F,0x0894,0x5DF7},
		 {0x1F,0x056A,0x5F40},
		 {0x1F,0x0405,0x5800},
		 {0x1F,0x08AD,0x3C51},
		 {0x1F,0x0894,0x5DF7},
		 {0x1F,0x08A0,0x09E7},
		 {0x1F,0x08C0,0x4000},
		 {0x1F,0x0814,0x4800},
		 {0x1F,0x080D,0x2EBF},
		 {0x1F,0x08C1,0x0B00},
		 {0x1F,0x087D,0x0001},
		 {0x1F,0x082E,0x0000},
		 {0x1F,0x0837,0x00F4},
		 {0x1F,0x08BE,0x0200},
		 {0x1F,0x08C5,0x4000},
		 {0x1F,0x08C7,0x2000},
		 {0x1F,0x08B3,0x005A},
		 {0x1F,0x08B4,0x005A},
		 {0x1F,0x08B0,0x0202},
		 {0x1F,0x08B5,0x00EA},
		 {0x1F,0x08BA,0x2828},
		 {0x1F,0x08BB,0x6828},
		 {0x1F,0x08BC,0x0028},
		 {0x1F,0x08BF,0x0000},
		 {0x1F,0x08B1,0x0014},
		 {0x1F,0x08B2,0x0008},
		 {0x1F,0x08EC,0x0000},
		 {0x1F,0x08C8,0x0003},
		 {0x1F,0x08BE,0x0201},
		 {0x1F,0x056A,0x5F40},
		 {0x1F,0x018C,0x0001},
};

static const struct dp83tg720_init_reg dp83tg721_cs1_master_init[] = {
		 {0x1F, 0x405, 0x6C00},
		 {0x1F, 0x8ad, 0x3c51},
		 {0x1F, 0x894, 0x5df7},
		 {0x1F, 0x8a0, 0x9e7},
		 {0x1F, 0x8c0, 0x4000},
		 {0x1F, 0x814, 0x4800},
		 {0x1F, 0x80d, 0x2ebf},
		 {0x1F, 0x8c1, 0xb00},
		 {0x1F, 0x87d, 0x001},
		 {0x1F, 0x82e, 0x000},
		 {0x1F, 0x837, 0x0f4},
		 {0x1F, 0x8be, 0x200},
		 {0x1F, 0x8c5, 0x4000},
		 {0x1F, 0x8c7, 0x2000},
		 {0x1F, 0x8b3, 0x05a},
		 {0x1F, 0x8b4, 0x05a},
		 {0x1F, 0x8b0, 0x202},
		 {0x1F, 0x8b5, 0x0ea},
		 {0x1F, 0x8ba, 0x2828},
		 {0x1F, 0x8bb, 0x6828},
		 {0x1F, 0x8bc, 0x028},
		 {0x1F, 0x8bf, 0x000},
		 {0x1F, 0x8b1, 0x014},
		 {0x1F, 0x8b2, 0x008},
		 {0x1F, 0x8ec, 0x000},
		 {0x1F, 0x8c8, 0x003},
		 {0x1F, 0x8be, 0x201},
};

static const struct dp83tg720_init_reg dp83tg721_cs1_slave_init[] = {
		 {0x1F, 0x405, 0x6C00},
		 {0x1F, 0x8ad, 0x3c51},
		 {0x1F, 0x894, 0x5df7},
		 {0x1F, 0x8a0, 0x9e7},
		 {0x1F, 0x8c0, 0x4000},
		 {0x1F, 0x814, 0x4800},
		 {0x1F, 0x80d, 0x2ebf},
		 {0x1F, 0x8c1, 0xb00},
		 {0x1F, 0x87d, 0x001},
		 {0x1F, 0x82e, 0x000},
		 {0x1F, 0x837, 0x0f4},
		 {0x1F, 0x8be, 0x200},
		 {0x1F, 0x8c5, 0x4000},
		 {0x1F, 0x8c7, 0x2000},
		 {0x1F, 0x8b3, 0x05a},
		 {0x1F, 0x8b4, 0x05a},
		 {0x1F, 0x8b0, 0x202},
		 {0x1F, 0x8b5, 0x0ea},
		 {0x1F, 0x8ba, 0x2828},
		 {0x1F, 0x8bb, 0x6828},
		 {0x1F, 0x8bc, 0x028},
		 {0x1F, 0x8bf, 0x000},
		 {0x1F, 0x8b1, 0x014},
		 {0x1F, 0x8b2, 0x008},
		 {0x1F, 0x8ec, 0x000},
		 {0x1F, 0x8c8, 0x003},
		 {0x1F, 0x8be, 0x201},
		 {0x1F, 0x56a, 0x5f40},
};

/* ========================================================================== */
/*                         Global Variables Declarations                      */
/* ========================================================================== */

/* None */

/* ========================================================================== */
/*                          Function Declarations                             */
/* ========================================================================== */

/* None */

/* ========================================================================== */
/*                        Deprecated Function Declarations                    */
/* ========================================================================== */

/* None */

/* ========================================================================== */
/*                       Static Function Definitions                          */
/* ========================================================================== */

/* None */

#ifdef __cplusplus
}
#endif

#endif /* DP83TG720_PRIV_H_ */
